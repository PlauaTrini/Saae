#Importando o gerenciador de banco de dados#
import sqlite3
#Definição de funções

"""função para interagir com o usuario"""
def opcoes_resposta():
    print("Digite o número correspondente as opções abaixo e aperte enter.")
    print("1.Sim            2.Não")
    resposta=int(input())
    return resposta
    
"""função para sair do programa"""
def sair():
    print()# linha vazia impressa apenas para melhorar a vizualização do processamento do código
    print("Deseja realmente sair?")
    resposta=opcoes_resposta()
    if resposta==1:
        return "SIM" #tente trocar essa linha por "quit()"não?
    elif resposta==2:
        return None
    else:
        print("Essa opção não existe.")
        sair()

"""função para voltar ao menu inicial"""
def voltar_menu():
    print()
    print("Voltar para o menu inicial?")
    resposta = opcoes_resposta()
    if resposta==1:
        return None
    if resposta==2:
        return sair()
    else:
        print("Essa opção não existe.")
        voltar_menu()

"""função para que o banco de dados seja conectado"""
def conectar_banco():
    connection = sqlite3.connect('bancodedados.db')
    cursor = connection.cursor()
    return connection,cursor

"""função que analisa a qualidade da água"""
def qualidade(lista_dados,parametros,unidades):
    valores_max_dados=[6.0,5.0,500.0,0.2,1.5,5.0,250.0,0.3,1.5,500.0,500.0,10.0,1.0,6.0,9.0]
    for i in range(13):
            if float(lista_dados[i+2])>valores_max_dados[i]:
                print("Valor de %s%s acima do Valor Máximo permitido = %f%s,"\
                        %(parametros[i+2],unidades[i+2],".2f"%valores_max_dados[i],unidades[i+2]))

    if float(lista_dados[18])<valores_max_dados[13] or float(lista_dados[18])>valores_max_dados[14]:
        print("Valor de %s%s fora do intervalo permitido = [%f a %f]%s,"\
             %(parametros[18],unidades[18],".2f"%valores_max_dados[13],".2f"%valores_max_dados[14],unidades[18]))
    
   
"""função para inserir os dados no banco"""
def inserir_dados(lista_dados,parametros,unidades):
    connection,cursor = conectar_banco()
    cursor.execute("""
    INSERT INTO dados("Data","Local_da_Coleta","Cor_Aparente","Turbidez","Acidez",
    "Alcalinidade_Total","Aluminio","Amonia","Carbonato_de_Cálcio",
    "Cloro_Residual","Cloreto_Total","Condutividade","Ferro_Total",
    "Fluoretos","Dióxido_de_Carbono_Livre","Dureza_Total","Nitratos",
    "Nitritos","pH") VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)""", lista_dados)
    connection.commit()
    print("Dados inseridos com sucesso.")
    connection.close()
    
"""função para a entrada e confirmação de dados no banco """
def entrada_de_dados(parametros,unidades):
    lista_dados=list()
    for i in range(19):
        print("%s %s:"%(parametros[i],unidades[i]))
        dado=input()
        lista_dados.append(dado)
    print()
    for i in range(len(parametros)):
        print("%s %s:"%(parametros[i],unidades[i]),lista_dados[i])
    print()
    print("Análise segundo a portaria nº 518 do Ministério da Saúde:")
    qualidade(lista_dados,parametros,unidades)
    print()
    print("Confirmar dados?")
    resposta=opcoes_resposta()
    if resposta==1:
        return inserir_dados(lista_dados,parametros,unidades)
    if resposta==2:
        return voltar_menu()
    else:
        print("Essa opção não existe.")
        entrada_de_dados(parametros,unidades)

"""função para imprimir o banco de dados na tela"""
def consultar_banco(parametros,unidades):
    connection,cursor = conectar_banco()
    cursor.execute("SELECT * FROM dados;")
    for linha in cursor.fetchall():
        print()
        for i in range(1,20):
            print("%s %s:"%(parametros[i-1],unidades[i-1]),linha[i])
    
    connection.close()
    return voltar_menu()

"""função para alterar dados já existentes no banco de dados"""
def alterando_dados(id_proc,parametros,unidades):
    print()
    print("Escolha qual dado quer corrigir:(Digite o número correspondente e aperte enter)")
    for i in range(2,len(parametros)):
        print("%i. %s %s"%(i-1,parametros[i],unidades[i]))

    print("18. Sair do programa")
    resposta=int(input())
    if resposta==18:
        return sair()
    else:
        novo_dado=float(input("Novo dado(%s):"%(parametros[resposta+1])))
        connection,cursor = conectar_banco()
        cursor.execute("""UPDATE dados SET %s=? WHERE id=?"""%(parametros[resposta+1]),(novo_dado,id_proc))
        connection.commit()
        connection.close()            
        print("Dados alterados com sucesso.")
        print()
        return voltar_menu()

"""função para localizar o id do banco de dados a partir da data e local"""
def localizar_id(parametros,unidades):
    connection,cursor = conectar_banco()
    print("Digite a data procurada (dd mm aaaa):")
    data_proc = input()
    print("Digite o local procurado:")
    local_proc = input()
    for linha in cursor.execute("""SELECT * FROM dados;"""):
        if linha[1]==data_proc and linha[2]==local_proc:
            autorizacao="AUTORIZADO"
        else:
            autorizacao="NÃO AUTORIZADO"

    if autorizacao=="AUTORIZADO":
        for linha in cursor.execute("""SELECT * FROM dados WHERE Data=? AND Local_da_Coleta=?""",(data_proc,local_proc)):
            id_proc=linha[0]
            alterando_dados(id_proc,parametros,unidades)
    else:
        print("Registros não encontrados.")
        localizar_id(parametros,unidades)
    connection.close()

"""função para cadastro de novos usuários"""
def cadastrar_usuario():
    novo_usuario=input("CPF do novo usuário:")
    senha=input("Senha:")
    senha2=input("Confirme a senha:")
    if senha==senha2:
        connection,cursor = conectar_banco()
        cursor.execute("""INSERT INTO usuarios (cpf,senha) VALUES(?,?)""",(novo_usuario,senha))        
        connection.commit()
        connection.close()
        print("Usuário cadastrado com sucesso!")
        return voltar_menu()
    else:
        print("As senhas não são correspondentes.")
        cadastrar_usuario()
        
"""função para realizar o login do usuario"""
def entrada_usuario():
    print("CPF:")
    usuario= input()
    print("SENHA:")
    senha=input()
    autorizacao=0
    connection,cursor = conectar_banco()
    cursor.execute("SELECT * FROM usuarios;")
    for linha in cursor.fetchall():
        if linha[1]==usuario and linha[2]==senha:
            autorizacao+=1
        else:
            autorizacao+=0
            
    if autorizacao==1:
        return "AUTORIZADO"
    elif autorizacao==0:
        print("Usuário ou senha incorreta.")
        entrada_usuario()
    connection.close()

"""função que mostra o menu inicial do programa"""
def menu_inicial(parametros,unidades):
    usuario=entrada_usuario()
    while usuario!="SIM":
        lista_opcoes=["Inserir Dados","Consultar Banco de Dados","Atualizar/Corrigir Dados",
                      "Cadastrar Usuário","Sair"]
        print()
        print("Escolha uma das opções abaixo:(Digite o seu respectivo número e aperte enter)")
        for i in range(1,6):
            print("%i. %s"%(i,lista_opcoes[i-1]))
        resposta = int(input())
        if resposta == 1:
            usuario=entrada_de_dados(parametros,unidades)
        elif resposta == 2:
            usuario=consultar_banco(parametros,unidades)
        elif resposta == 3:
            usuario=localizar_id(parametros,unidades)
        elif resposta == 4:
            usuario=cadastrar_usuario()
        elif resposta == 5:
            usuario=sair()
        else:
            print("Essa opção não existe.")
            usuario="NÃO"

"""função que informa ao usuario o objetivo do programa para que ele saiba o que está utilizando """         
def apresentacao(parametros,unidades):
    print("Bem-vindo ao programa Saae Penedo, nesse programa você poderá fazer a análise e o armazenamento de dados de qualidade de água.")
    print("Escolha uma das opções abaixo:(digitando o seu respectivo número e apertando enter)")
    print("1. Continuar                2. Sair do programa")
    resposta = int(input())
    if resposta==1:
        menu_inicial(parametros,unidades)
    elif resposta==2:
        sair()
    else:
        print("Essa opção não existe.")
        apresentacao(parametros,unidades)




"""definição de listas essenciais para o funcinamento do programa e execução da primeira função"""
parametros=["Data","Local_da_Coleta","Cor_Aparente","Turbidez","Acidez",
                "Alcalinidade_Total","Aluminio","Amonia","Carbonato_de_Cálcio",
                "Cloro_Residual","Cloreto_Total","Condutividade","Ferro_Total",
                "Fluoretos","Dióxido_de_Carbono_Livre","Dureza_Total","Nitratos",
                "Nitritos","pH"]
    
unidades=["(dd mm aaaa)","","(uH)","(uT)","(mg/l CO2)","(mg/l CaCO3)",
              "(mg/l Al)","(mg/l NH3)","(mg/l CaCO3)","(mg/l Cl2)","(mg/l Cl)",
              "(Microsimens/em)","(mg/l Fe)","(mg/l F)","(mg/l CO2)",
              "(mg/l CaCO3)","(mg/l N)","(mg/l N)","(uT)"]
apresentacao(parametros,unidades)

